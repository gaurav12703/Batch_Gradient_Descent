from sklearn.datasets import load_diabetes

import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.model_selection import train_test_split

X,y=load_diabetes(return_X_y=True)

print(X.shape)
print(y.shape)

class GDRegressor:
    def __init__ (self,learning_rate,epochs):
        self.coef=None
        self.intercept=None
        self.lr=learning_rate
        self.epochs=epochs
    def fit(self,X_train,y_train):
        #initializing the coffecient
        self.intercept_=0
        self.coef_=np.ones(X_train.shape[1])
        
        for i in range (self.epochs):
            y_pred1=np.dot(X_train,self.coef_)+self.intercept_ 
            intercept_der=-2*np.mean(y_train-y_pred1)
            self.intercept_=self.intercept_ - (self.lr*intercept_der)
            
            
            coef_der=-2*np.dot((y_train - y_pred1),X_train)/X_train.shape[0]
            self.coef_=self.coef_-(self.lr * coef_der)
        
        
        
        
        print(self.intercept_,self.coef_)
    def predict(self,X_test):
        return np.dot(X_test,self.coef_)+self.intercept_

gdr=GDRegressor(0.05,1000)
gdr.fit(X_train,y_train)

y_pred1=gdr.predict(X_test)
r2=r2_score(y_test,y_pred)

r2


